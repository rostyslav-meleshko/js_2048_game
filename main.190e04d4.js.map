{"version":3,"sources":["scripts/main.js"],"names":["START_BUTTON","document","querySelector","MESSAGE_START","MESSAGE_LOSE","MESSAGE_WIN","SCORE_CELL","IS_MOVES_AVAILABLE","IS_MOVE_MADE","SCORE_CURRENT","GAME_FIELD","renderField","cells","querySelectorAll","array","flat","i","innerText","className","classList","add","renderScore","checkWin","fieldCells","cell","remove","checkMoves","j","gameOver","createNewRandomCell","allEmptyCells","row","length","column","push","randomCell","Math","floor","random","randomRow","randomColumn","shiftCells","prevField","join","tempArr","filter","el","emptyCells","unshift","addUpCells","mergeCells","rotateGameField","n","x","y","k","moveRight","moveLeft","moveDown","moveUp","addEventListener","e","window","location","reload","preventDefault","key"],"mappings":"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","file":"main.190e04d4.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst START_BUTTON = document.querySelector('button');\nconst MESSAGE_START = document.querySelector('.message-start');\nconst MESSAGE_LOSE = document.querySelector('.message-lose');\nconst MESSAGE_WIN = document.querySelector('.message-win');\nconst SCORE_CELL = document.querySelector('.game-score');\nlet IS_MOVES_AVAILABLE = true;\nlet IS_MOVE_MADE = true;\nlet SCORE_CURRENT = 0;\nconst GAME_FIELD = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction renderField() {\n  const cells = document.querySelectorAll('td');\n  const array = GAME_FIELD.flat();\n\n  for (let i = 0; i < 16; i++) {\n    cells[i].innerText = !array[i] ? '' : array[i];\n    cells[i].className = '';\n    cells[i].classList.add('field-cell', `field-cell--${array[i]}`);\n  }\n}\n\nfunction renderScore() {\n  SCORE_CELL.innerText = SCORE_CURRENT;\n}\n\nfunction checkWin() {\n  const fieldCells = GAME_FIELD.flat();\n\n  for (const cell of fieldCells) {\n    if (cell === 2048) {\n      MESSAGE_WIN.classList.remove('hidden');\n      break;\n    }\n  }\n}\n\nfunction checkMoves() {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (GAME_FIELD[i][j] === 0) {\n        IS_MOVES_AVAILABLE = true; break;\n      } else if (i < 3 && GAME_FIELD[i][j] === GAME_FIELD[i + 1][j]) {\n        IS_MOVES_AVAILABLE = true; break;\n      } else if (j < 3 && GAME_FIELD[i][j] === GAME_FIELD[i][j + 1]) {\n        IS_MOVES_AVAILABLE = true; break;\n      } else {\n        IS_MOVES_AVAILABLE = false;\n      }\n    }\n\n    if (IS_MOVES_AVAILABLE) {\n      break;\n    }\n  }\n\n  if (!IS_MOVES_AVAILABLE) {\n    gameOver();\n  }\n}\n\nfunction gameOver() {\n  MESSAGE_LOSE.classList.remove('hidden');\n}\n\nfunction createNewRandomCell() {\n  if (IS_MOVE_MADE) {\n    const allEmptyCells = [];\n\n    for (let row = 0; row < GAME_FIELD.length; row++) {\n      for (let column = 0; column < GAME_FIELD[row].length; column++) {\n        if (!GAME_FIELD[row][column]) {\n          allEmptyCells.push([row, column]);\n        }\n      }\n    }\n\n    if (allEmptyCells.length > 0) {\n      const randomCell = Math.floor(Math.random() * allEmptyCells.length);\n      const [randomRow, randomColumn] = allEmptyCells[randomCell];\n\n      GAME_FIELD[randomRow][randomColumn] = Math.random() > 0.1 ? 2 : 4;\n    };\n\n    IS_MOVE_MADE = false;\n  }\n}\n\nfunction shiftCells() {\n  const prevField = GAME_FIELD.flat().join('');\n\n  for (const row of GAME_FIELD) {\n    const tempArr = row.filter(el => el > 0);\n    const emptyCells = 4 - tempArr.length;\n\n    for (let i = 0; i < emptyCells; i++) {\n      tempArr.unshift(0);\n    }\n\n    for (let i = 0; i < tempArr.length; i++) {\n      row[i] = tempArr[i];\n    }\n  }\n\n  const currentField = GAME_FIELD.flat().join('');\n\n  if (prevField !== currentField) {\n    IS_MOVE_MADE = true;\n  }\n}\n\nfunction addUpCells() {\n  for (const row of GAME_FIELD) {\n    for (let i = 3; i > 0; i--) {\n      if (row[i] === row[i - 1]) {\n        SCORE_CURRENT += row[i] * 2;\n        row[i] += row[i - 1];\n        row[i - 1] = 0;\n      }\n    }\n  }\n}\n\nfunction mergeCells() {\n  shiftCells();\n  addUpCells();\n  shiftCells();\n  renderScore();\n}\n\nfunction rotateGameField() {\n  const n = GAME_FIELD.length;\n  const x = Math.floor(n / 2);\n  const y = n - 1;\n\n  for (let row = 0; row < x; row++) {\n    for (let column = row; column < y - row; column++) {\n      const k = GAME_FIELD[row][column];\n\n      GAME_FIELD[row][column] = GAME_FIELD[y - column][row];\n      GAME_FIELD[y - column][row] = GAME_FIELD[y - row][y - column];\n      GAME_FIELD[y - row][y - column] = GAME_FIELD[column][y - row];\n      GAME_FIELD[column][y - row] = k;\n    }\n  }\n}\n\nfunction moveRight() {\n  mergeCells();\n}\n\nfunction moveLeft() {\n  rotateGameField();\n  rotateGameField();\n  mergeCells();\n  rotateGameField();\n  rotateGameField();\n}\n\nfunction moveDown() {\n  rotateGameField();\n  rotateGameField();\n  rotateGameField();\n  mergeCells();\n  rotateGameField();\n}\n\nfunction moveUp() {\n  rotateGameField();\n  mergeCells();\n  rotateGameField();\n  rotateGameField();\n  rotateGameField();\n}\n\nSTART_BUTTON.addEventListener('click', e => {\n  if (START_BUTTON.className === 'button restart') {\n    window.location.reload();\n  }\n\n  START_BUTTON.className = 'button restart';\n  START_BUTTON.innerText = 'Restart';\n  MESSAGE_START.classList.add('hidden');\n  IS_MOVES_AVAILABLE = true;\n  createNewRandomCell();\n  renderField();\n});\n\ndocument.addEventListener('keyup', e => {\n  e.preventDefault();\n\n  if (!IS_MOVES_AVAILABLE) {\n    return;\n  };\n\n  switch (e.key) {\n    case 'ArrowUp': moveUp(); break;\n    case 'ArrowLeft': moveLeft(); break;\n    case 'ArrowDown': moveDown(); break;\n    case 'ArrowRight': moveRight(); break;\n    default: break;\n  }\n\n  createNewRandomCell();\n  renderField();\n  checkWin();\n  checkMoves();\n});\n"]}